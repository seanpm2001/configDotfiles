mkcd(){
    mkdir -p "$1"
    cd "$1"
}
function gdrive_download () {
    CONFIRM=$(wget --quiet --save-cookies /tmp/cookies.txt --keep-session-cookies --no-check-certificate "https://drive.google.com/u/0/uc?id=$1&export=download" -O- | sed -rn 's/.*confirm=([0-9A-Za-z_]+).*/\1\n/p')
    wget --load-cookies /tmp/cookies.txt "https://drive.google.com/u/0/uc?id=$1&export=download&confirm=$CONFIRM" -O $2
    rm -rf /tmp/cookies.txt
}

# call from your terminal
# weather yourcity intervalDay
# weather Jakarta 0 > for current info
# weather Jakarta 1 > for 1 day
# etc
weather(){
    curl wttr.in/$1\?$2
}

downloadVideo(){
    youtube-dl -f 'bestvideo[ext=mp4]+bestaudio[ext=m4a]/bestvideo+bestaudio' --merge-output-format mp4 "$1"
}
alias downloadmp3='youtube-dl -x --audio-format mp3'


# Alias for usefull tools
alias checkmem="sudo ps_mem -S"

# please check my custom config for neofetch
# and make sure if the path is right XD
# if you store the config on ~/config.conf
# change the this path XD
alias neo='neofetch --config ~/.config/neofetch/config.conf --ascii ~/.config/neofetch/ypSig'
alias sysfo='neofetch - --config ~/Programming/linux/configDotfiles/neofetch/configNo.conf  --off'

# alias for php server and lamp
alias php-server-start="sudo systemctl start httpd mysqld && sudo systemctl status httpd mysqld |  grep -i --max-count=4 'httpd.service - Apache Web Server\|active:\|mariadb.service - MariaDB' "
alias php-server-stop="sudo systemctl stop httpd mysqld && sudo systemctl status httpd mysqld |  grep -i --max-count=4 'httpd.service - Apache Web Server\|active:\|mariadb.service - MariaDB' "
alias php-server-status="sudo systemctl status httpd mysqld |  grep -i --max-count=4 'httpd.service - Apache Web Server\|active:\|mariadb.service - MariaDB' "
alias php-server-restart="sudo systemctl restart httpd mysqld && sudo systemctl status httpd mysqld |  grep -i --max-count=4 'httpd.service - Apache Web Server\|active:\|mariadb.service - MariaDB' "

# alias for Postgresql
alias activate-postgresql="sudo systemctl start postgresql | sudo systemctl status postgresql.service | grep -i --max-count=4 'postgresql.service - PostgreSQL database server\| Active:'"
alias deactivate-postgresql="sudo systemctl stop postgresql | sudo systemctl status postgresql.service | grep -i --max-count=4 'postgresql.service - PostgreSQL database server\| Active:'"
alias status-postgresql="sudo systemctl status postgresql.service | grep -i --max-count=4 'postgresql.service - PostgreSQL database server\| Active:'"

# ls aliases
alias ls="exa -l --group-directories-first"
alias la="exa -la --group-directories-first --sort name"

#update grub
alias up-grub="sudo mkinitcpio -P linux && sudo grub-mkconfig -o /boot/grub/grub.cfg"

# cat alias
alias prin="bat "

#alias editor kate for sudoedit
alias sukate="SUDO_EDITOR=kate sudoedit "

# alias updatePkg="~/Programming/linux/configDotfiles/asci_art/colorbars && sudo pacman -Syyu"
# alias updateAur="~/Programming/linux/configDotfiles/asci_art/colorbars && trizen -Syyu"
alias gen-mirror="sudo reflector --verbose --latest 5 --sort rate --protocol https --protocol http --save /etc/pacman.d/mirrorlist; sudo pacman -Syyu"
alias gen-mirror-local="sudo reflector  --verbose --protocol http --protocol https --sort rate -c Singapore -c Thailand -c Indonesia  --latest 50  --save /etc/pacman.d/mirrorlist; sudo pacman -Syyu"
alias bootimer="systemd-analyze | lolcat"
alias memdf="pydf"

checkInstall(){
    if ! sudo pacman -Ss $1 | grep -i 'installed';then
        printf "sorry the package $1 Not installed on your system :("'\n'
        printf "did you want to Install $1 [Y/N] ?"
        if read -q;then
            echo; sudo pacman -S $1
        fi
    fi
}

# alias docker
alias start-docker="sudo systemctl start docker.service"
alias start-docker-compose="docker-compose up -d"
alias docker-postgres="cd ~/Programming/postgres && docker-compose up -d && cd"

# alias scalling cpu
alias powerpc="sudo cpupower frequency-set -g performance"
alias lowpc="sudo cpupower frequency-set -g powersave"
setFrequencyCpu(){
    currentFreq=$(cat /proc/cpuinfo | grep 'MHz')
    printf "Your Current CPU Frequency\n$currentFreq\n\n"
    printf "Do you want to scalling your cpu frequency ?"'\n'
    printf "Input frequency as GHz like 1/3.3/etc ";read freq
    if [[ $freq ]]
    then
        echo; sudo cpupower frequency-set -f $freq\GHz && sleep 0.5;
        echo;cat /proc/cpuinfo | grep 'MHz'
    fi

}

battery_limit_activate(){
    currentStatus=$(sudo echo '\_SB.PCI0.LPC0.EC0.SMBM' | sudo tee /proc/acpi/call | sudo cat /proc/acpi/call | sudo cut -d '' -f1)
    res='Disable'
    if (($currentStatus == 0x1))
    then
        res='Enable'
        printf "Your current setting for battery conservation is $res\n"
        printf "Do you want to disable ?"'\n'
        printf "Y for disable, n for exit ";read -q answ

        if $answ == 'y'
        then
            echo;sudo echo '\_SB.PCI0.LPC0.EC0.VPC0.SBMC 0x05'  | sudo tee /proc/acpi/call | echo '' | sleep 0.5;
            currentStatus=$(sudo echo '\_SB.PCI0.LPC0.EC0.SMBM' | sudo tee /proc/acpi/call | sudo cat /proc/acpi/call | sudo cut -d '' -f1)
            printf "Your current setting for battery conservation is $currentStatus\n"
        fi
    fi

}

alias lion-connect="sudo openvpn --config ~/Programming/lion-parcel/client.ovpn"
alias sudo="sudo "
alias apt="pacman "
alias search="-Ss "
alias install="-S "

function setup_venv(){

    if [[ $# -eq 0 ]];
    then
        echo "Please Insert Virtual Environtment Name\n"; sleep 0.3;
        echo "Please follow this Instruction"; sleep 0.3;
        echo "
        usage :
        setup_venv {project_name}
        example:
        setup_venv hello_world";
    else

        venv_name="$1_venv";
        instruction_file=INSTRUCTION_READ_THIS.txt;
        gitignore_file=.gitignore
        requirements_file=requirements.txt

        # generated instruction file
        printf "INSTRUCTION FILE - " > $instruction_file;
        date >> $instruction_file;

        python -m venv "$(pwd)/${venv_name}"; sleep 0.1;
        source "$(pwd)/${venv_name}/bin/activate"; sleep 0.2;

        # check gitignore
         if [ ! -f $(pwd)/$gitignore_file ]
         then
            echo "\n./$venv_name/\n" >> $gitignore_file;
        else
            echo "\n./$venv_name/\n" >> $gitignore_file;
        fi


        # Check if requirements.txt is exist
        if [ ! -f $(pwd)/requirements.txt ]
        then
            pip install pandas gspread gspread-dataframe yapf boto3 oauth2client;
            clear; sleep 0.3;
            echo "Please wait, Generating requirements.txt ...";sleep 0.3;
            echo "$(pip freeze)" > $requirements_file;
            echo "Generated $(pwd)/${requirements_file}"; sleep 0.3;


        else
            pip install -r requirements.txt;

        fi
        sleep 0.2;
        deactivate;

        printf "\n\nVirtual Environtment created on $(pwd)/${venv_name}\n\n\n"; sleep 0.2;

        printf "did you want to activate ${venv_name}? [Y/n]";read -q prompt
        if [[ $prompt == "y" || $prompt == "Y" || $prompt == "yes" || $prompt == "Yes" ]]
        then
            source "$(pwd)/${venv_name}/bin/activate"; sleep 0.2;
            printf "\n\nVirtual Environtment Activated\n";sleep 0.2;
            printf "\n\nREAD INSTRUCTION.txt for more information :)\n";sleep 0.3;
        else
            printf "\n\nPlease Insert this path $(pwd)/${venv_name}/bin/python for run python for this project\n";sleep 0.2;
            printf "\n\nREAD INSTRUCTION.txt for more information :)\n";sleep 0.3;
        fi

        steps="Read Carefully !!!

          * For testing setup_venvor run $(pwd | awk -F/ '{print $NF}') project via console/terminal,

          PLEASE ACTIVATE ${venv_name} using:

            source $(pwd)/${venv_name}/bin/activate

          * NOTES:

          * FOR INITIALIZATION PROJECT AND ADDING NEW PACKAGES.
           Please activate venv, PLEASE INSTALL requirements.txt OR ANOTHER DEPENDENCIES IF ANY,
          using:

            pip install -r requirements.txt


          * This ${venv_name} automatically installing basic libraries/packages
          such as pandas, boto3, gspread, gspread_dataframe, yapf, oauth2client.

          > if you need another lib, please make sure that venv is activated using above syntax then
              you can add packages using pip install

        * FOR PENTAHO PLEASE CALL $(pwd)/${venv_name}/bin/python from pentaho script"

        echo "$steps" >> $instruction_file;
    fi
}